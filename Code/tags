!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Args	syntax.y	/^Args		: Exp COMMA Args		{$$ = (char *)reduce(5, "Args", @$.first_line, $1, $2, $3);}$/;"	l
CompSt	syntax.y	/^CompSt		: LC DefList StmtList RC	{$$ = (char *)reduce(6, "CompSt", @$.first_line, $1, $2, $3, $4);}$/;"	l
Dec	syntax.y	/^Dec		: VarDec			{$$ = (char *)reduce(3, "Dec", @$.first_line, $1);}$/;"	l
DecList	syntax.y	/^DecList		: Dec				{$$ = (char *)reduce(3, "DecList", @$.first_line, $1);}$/;"	l
Def	syntax.y	/^Def		: Specifier DecList SEMI	{$$ = (char *)reduce(5, "Def", @$.first_line, $1, $2, $3);}$/;"	l
DefList	syntax.y	/^DefList		: Def DefList			{$$ = (char *)reduce(4, "DefList", @$.first_line, $1, $2);}$/;"	l
Exp	syntax.y	/^Exp		: Exp ASSIGNOP Exp		{$$ = (char *)reduce(5, "Exp", @$.first_line, $1, $2, $3);}$/;"	l
ExtDecList	syntax.y	/^ExtDecList	: VarDec			{$$ = (char *)reduce(3, "ExtDecList", @$.first_line, $1);}$/;"	l
ExtDef	syntax.y	/^ExtDef		: Specifier ExtDecList SEMI	{$$ = (char *)reduce(5, "ExtDef", @$.first_line, $1, $2, $3);}$/;"	l
ExtDefList	syntax.y	/^ExtDefList	: ExtDef ExtDefList		{$$ = (char *)reduce(4, "ExtDefList", @$.first_line, $1, $2);}$/;"	l
FunDec	syntax.y	/^FunDec		: ID LP VarList RP		{$$ = (char *)reduce(6, "FunDec", @$.first_line, $1, $2, $3, $4);}$/;"	l
GRAMMAR_TREE_H_	GrammarTree.h	2;"	d
LEAF_LEN	GrammarTree.h	6;"	d
Leaf	GrammarTree.h	/^typedef struct tNode Leaf;$/;"	t	typeref:struct:tNode
OptTag	syntax.y	/^OptTag		: ID				{$$ = (char *)reduce(3, "OptTag", @$.first_line, $1);}$/;"	l
ParamDec	syntax.y	/^ParamDec	: Specifier VarDec		{$$ = (char *)reduce(4, "ParamDec", @$.first_line, $1, $2);}$/;"	l
Program	syntax.y	/^Program		: ExtDefList			{$$ = (char *)reduce(3, "Program", @$.first_line, $1); display((Leaf *)($$), 0); destroy((Leaf **)(&($$)));}$/;"	l
Specifier	syntax.y	/^Specifier	: TYPE				{$$ = (char *)reduce(3, "Specifier", @$.first_line, $1);}$/;"	l
Stmt	syntax.y	/^Stmt		: Exp SEMI			{$$ = (char *)reduce(4, "Stmt", @$.first_line, $1, $2);}$/;"	l
StmtList	syntax.y	/^StmtList	: Stmt StmtList			{$$ = (char *)reduce(4, "StmtList", @$.first_line, $1, $2);}$/;"	l
StructSpecifier	syntax.y	/^StructSpecifier	: STRUCT OptTag LC DefList RC	{$$ = (char *)reduce(6, "StructSpecifier", @$.first_line, $1, $2, $3, $4);}$/;"	l
TREE_LEN	GrammarTree.h	7;"	d
Tag	syntax.y	/^Tag		: ID				{$$ = (char *)reduce(3, "Tag", @$.first_line, $1);}$/;"	l
Tree	GrammarTree.h	/^typedef struct fNode Tree;$/;"	t	typeref:struct:fNode
Value	GrammarTree.h	/^typedef struct value Value;$/;"	t	typeref:struct:value
VarDec	syntax.y	/^VarDec		: ID				{$$ = (char *)reduce(3, "VarDec", @$.first_line, $1);}$/;"	l
VarList	syntax.y	/^VarList		: ParamDec COMMA VarList	{$$ = (char *)reduce(5, "VarList", @$.first_line, $1, $2, $3);}$/;"	l
addChild	GrammarTree.c	/^int addChild(Leaf *parent, Leaf *child){$/;"	f
addTree	GrammarTree.c	/^int addTree(Leaf *tree){$/;"	f
delTree	GrammarTree.c	/^int delTree(Leaf *tree){$/;"	f
destroy	GrammarTree.c	/^void destroy(Leaf **tree){$/;"	f
display	GrammarTree.c	/^void display(Leaf *tree, int ntab){$/;"	f
displayForest	GrammarTree.c	/^void displayForest(Tree *f){$/;"	f
fNode	GrammarTree.h	/^struct fNode{$/;"	s
false	GrammarTree.h	8;"	d
forest	GrammarTree.c	/^Tree *forest = NULL;$/;"	v
getError	GrammarTree.c	/^int getError = 0;$/;"	v
left	GrammarTree.h	/^	struct tNode *left;	\/\/ left child$/;"	m	struct:tNode	typeref:struct:tNode::tNode
line	GrammarTree.h	/^	int line;	\/\/ line number$/;"	m	struct:tNode
main	main.c	/^int main(int argc, char *argv[]){$/;"	f
makeLeaf	GrammarTree.c	/^Leaf *makeLeaf(int line, int valno, int terminal, char *token, Value val){$/;"	f
meetError	GrammarTree.c	/^void meetError(){$/;"	f
next	GrammarTree.h	/^	struct fNode *next;	\/\/下一颗树$/;"	m	struct:fNode	typeref:struct:fNode::fNode
right	GrammarTree.h	/^	struct tNode *right;	\/\/ right brother$/;"	m	struct:tNode	typeref:struct:tNode::tNode
tNode	GrammarTree.h	/^struct tNode{$/;"	s
terminal	GrammarTree.h	/^	int terminal;	\/\/ 0:non-terminal 1:terminal$/;"	m	struct:tNode
token	GrammarTree.h	/^	char token[40];	\/\/ token name$/;"	m	struct:tNode
tree	GrammarTree.h	/^	Leaf *tree;	\/\/这颗树$/;"	m	struct:fNode
true	GrammarTree.h	9;"	d
val	GrammarTree.h	/^	Value val;	\/\/ token val$/;"	m	struct:tNode
val_double	GrammarTree.h	/^	double val_double;$/;"	m	struct:value
val_float	GrammarTree.h	/^	float val_float;$/;"	m	struct:value
val_int	GrammarTree.h	/^	int val_int;$/;"	m	struct:value
val_name	GrammarTree.h	/^	char val_name[40];$/;"	m	struct:value
valno	GrammarTree.h	/^	int valno;	\/\/ -1:null 0:double 1:int 2:float 3:type$/;"	m	struct:tNode
value	GrammarTree.h	/^struct value{$/;"	s
