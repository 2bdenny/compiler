%option yylineno
%{
//	#include "syntax.tab.h"
	#include "GrammarTree.h"
	int yycolumn = 1;
	#define YY_USER_ACTION
		yylloc.first_line = yylloc.last_line = yylineno; \
		yylloc.first_column = yycolumn; \
		yylloc.last_column = yycolumn + yyleng-1; \
		yycolumn += yyleng;
%}
/* regex */
nl	[\n]
ws	[ \t\n]+
letter	[A-Za-z_]
digit8	[0-7]
digit10	[0-9]
digit16	[0-9A-Fa-f]
int8	-?0(0|[1-7]{digit8}*)
int10	-?(0|[1-9]{digit10}*)
int16	-?0x(0|[1-9A-Fa-f]{digit16}*)
id	{letter}({letter}|{digit10})*
float	{int10}(\.{digit10}+)?([Ee]{int10})?

%%
{ws}	{/*no action and no return{nl}	{yycolumn = 1; REJECT;*/}REJECT;}
if	{printf("IF\n");	yylval = plantKEY("IF");/*	return IF;*/}
else	{printf("ELSE\n");	yylval = plantKEY("ELSE");/*	return ELSE;*/}
int	{printf("TYPE\n");	yylval = plantKEY("int");/*	return TYPE;*/}
float	{printf("TYPE\n");	yylval = plantKEY("float");/*	return TYPE;*/}
struct 	{printf("STRUCT\n");	yylval = plantKEY("STRUCT");/*	return STRUCT;*/}
return	{printf("RETURN\n");	yylval = plantKEY("RETURN");/*	return RETURN;*/}
while	{printf("WHILE\n");	yylval = plantKEY("WHILE");/*	return WHILE;*/}
{id}	{printf("ID\n");	yylval = plantID();	/*	return ID;*/}
{int8}	{printf("INT\n");	yylval = plantINT(8);	/*	return INT;*/}
{int10}	{printf("INT\n");	yylval = plantINT(10);	/*	return INT;*/}
{int16}	{printf("INT\n");	yylval = plantINT(16);	/*	return INT;*/}
{float}	{printf("FLOAT\n");	yylval = plantFLOAT();	/*	return FLOAT;*/}
";"	{printf("SEMI\n");	yylval = plantSYMBOL("SEMI");/*	return SEMI;*/}
","	{printf("COMMA\n");	yylval = plantSYMBOL("COMMA");/*	return COMMA;*/}
"="	{printf("ASSIGNOP\n");	yylval = plantSYMBOL("ASSIGNOP");/*	return ASSIGNOP;*/}
"+"	{printf("PLUS\n");	yylval = plantSYMBOL("PLUS");/*	return PLUS;*/}
"-"	{printf("MINUS\n");	yylval = plantSYMBOL("MINUS");/*	return MINUS;*/}
"*"	{printf("STAR\n");	yylval = plantSYMBOL("STAR");/*	return STAR;*/}
"/"	{printf("DIV\n");	yylval = plantSYMBOL("DIV");/*	return DIV;*/}
"&&"	{printf("AND\n");	yylval = plantSYMBOL("AND");/*	return AND;*/}
"||"	{printf("OR\n");	yylval = plantSYMBOL("OR");/*	return OR;*/}
"!"	{printf("NOT\n");	yylval = plantSYMBOL("NOT");/*	return NOT;*/}
"."	{printf("DOT\n");	yylval = plantSYMBOL("DOT");/*	return DOT;*/}
"("	{printf("LP\n");	yylval = plantSYMBOL("LP");/*	return LP;*/}
")"	{printf("RP\n");	yylval = plantSYMBOL("RP");/*	return RP;*/}
"["	{printf("LB\n");	yylval = plantSYMBOL("LB");/*	return LB;*/}
"]"	{printf("RB\n");	yylval = plantSYMBOL("RB");/*	return RB;*/}
"{"	{printf("LC\n");	yylval = plantSYMBOL("LC");/*	return LC;*/}
"}"	{printf("RC\n");	yylval = plantSYMBOL("RC");/*	return RC;*/}
"<"	{printf("RELOP\n");	yylval = plantRELOP();	/*	return RELOP;*/}
"<="	{printf("RELOP\n");	yylval = plantRELOP();	/*	return RELOP;*/}
"=="	{printf("RELOP\n");	yylval = plantRELOP();	/*	return RELOP;*/}
"<>"	{printf("RELOP\n");	yylval = plantRELOP();	/*	return RELOP;*/}
">"	{printf("RELOP\n");	yylval = plantRELOP();	/*	return RELOP;*/}
">="	{printf("RELOP\n");	yylval = plantRELOP();	/*	return RELOP;*/}
.	{printf("Error type A at Line %d: Mysterious Character %s\n", yylineno, yytext);}
%%
int main(int argc, char **argv){
	if (argc > 1){
		yyin = fopen(argv[1],"r");
		while (yylex() != 0);
		return 0;
	}
	return 1;
}
int plantINT(int radix){
	Leaf *tmp = (Leaf *)malloc(LEAF_LEN);
	tmp->line = yylineno;
	tmp->valno = 1;
	tmp->terminal = 1;
	memset(tmp->token, 0, 20);
	memcpy(tmp->token, "INT", 3);
	switch(radix){
		case 8: tmp->val.val_int = atoi(yytext+1);
		case 10: tmp->val.val_int = atoi(yytext);
		case 16: tmp->val.val_int = atoi(yytext+2);
	}
	tmp->left = NULL;
	tmp->right = NULL;

	addTree(tmp);
	return (int)tmp;
}
int plantFLOAT(){
	Leaf *tmp = (Leaf *)malloc(LEAF_LEN);
	tmp->line = yylineno;
	tmp->valno = 0;
	tmp->terminal = 1;
	memset(tmp->token, 0, 20);
	memcpy(tmp->token, "FLOAT", 5);
	tmp->val.val_double = atof(yytext);
	tmp->left = NULL;
	tmp->right = NULL;

	addTree(tmp);
	return (int)tmp;
}
int plantID(){
	Leaf *tmp = (Leaf *)malloc(LEAF_LEN);
	tmp->line = yylineno;
	tmp->valno = 3;
	tmp->terminal = 1;
	memset(tmp->token, 0, 20);
	memcpy(tmp->token, "ID", 2);
	memset(tmp->val.val_name, 0, 32);
	memcpy(tmp->val.val_name, yytext, yyleng);
	tmp->left = NULL;
	tmp->right = NULL;

	addTree(tmp);
	return (int)tmp;
}
int plantKEY(char *name) {
	Leaf *tmp = (Leaf *)malloc(LEAF_LEN);
	tmp->line = yylineno;
	tmp->terminal = 1;
	memset(tmp->token, 0, 20);
	memset(tmp->val.val_name, 0, 32);
	switch(name[0]){
		case 'i': 
		case 'f':{memcpy(tmp->token, "TYPE", 4); memcpy(tmp->val.val_name, yytext, yyleng); tmp->valno = 3;} break;
		default: {memcpy(tmp->token, name, strlen(name)); tmp->valno = -1;} break;
	}
	memcpy(tmp->token, name, strlen(name));
	tmp->left = NULL;
	tmp->right = NULL;

	addTree(tmp);
	return (int)tmp;
}
int plantSYMBOL(char *syb){
	Leaf *tmp = (Leaf *)malloc(LEAF_LEN);
	tmp->line = yylineno;
	tmp->valno = -1;
	tmp->terminal = 1;
	memset(tmp->token, 0, 20);
	memset(tmp->val.val_name, 0, 32);
	memcpy(tmp->token, syb, strlen(syb));
	tmp->left = NULL;
	tmp->right = NULL;

	addTree(tmp);
	return (int)tmp;
}
int plantRELOP(){
	Leaf *tmp = (Leaf *)malloc(LEAF_LEN);
	tmp->line = yylineno;
	tmp->valno = 3;
	tmp->terminal = 1;
	memset(tmp->token, 0, 20);
	memset(tmp->val.val_name, 0, 32);
	memcpy(tmp->token, "RELOP", 5);
	memcpy(tmp->val.val_name, yytext, yyleng);
	tmp->left = NULL;
	tmp->right = NULL;

	addTree(tmp);
	return (int)tmp;
}

